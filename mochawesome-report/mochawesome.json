{
  "stats": {
    "suites": 4,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-14T10:40:49.492Z",
    "end": "2021-06-14T10:40:49.523Z",
    "duration": 31,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cd359619-3649-4936-a887-8ab52b1f1c14",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "db0baa17-115a-4a27-a0c7-cf8fe0e27157",
          "title": "calculator tests for add function",
          "fullFile": "D:\\automation-testing-mentoring\\mocha-unit-testing-hometask\\test\\specs\\add.spec.js",
          "file": "\\test\\specs\\add.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"calculator tests for add function\"",
              "fullTitle": "calculator tests for add function \"before each\" hook in \"calculator tests for add function\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calculator = new Calculator();",
              "err": {},
              "uuid": "ec839eb4-59b0-4ffd-a6d5-60cfbb8c3584",
              "parentUUID": "db0baa17-115a-4a27-a0c7-cf8fe0e27157",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return correct sum of some parameters",
              "fullTitle": "calculator tests for add function should return correct sum of some parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(1, 4, 55, 66, 0)).to.be.equal(126);",
              "err": {},
              "uuid": "4504bb94-b2da-40c7-85f2-2a0e59a80c9f",
              "parentUUID": "db0baa17-115a-4a27-a0c7-cf8fe0e27157",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return parameter value if sum method has 1 parameter",
              "fullTitle": "calculator tests for add function should return parameter value if sum method has 1 parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(5)).to.be.equal(5);",
              "err": {},
              "uuid": "bc5c01d9-95e1-4093-b77a-0721583a4abc",
              "parentUUID": "db0baa17-115a-4a27-a0c7-cf8fe0e27157",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct sum of negative parameters",
              "fullTitle": "calculator tests for add function should return correct sum of negative parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.add(-5, -10)).to.be.equal(-15);",
              "err": {},
              "uuid": "342a89d0-71c9-4be8-b8f4-e8e54b744f0b",
              "parentUUID": "db0baa17-115a-4a27-a0c7-cf8fe0e27157",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error if some of parameters are not a number in add method",
              "fullTitle": "calculator tests for add function should return error if some of parameters are not a number in add method",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function() {\n  calculator.add(1, 2, 'b');\n} ).throw('Some of arguments are not a number!');",
              "err": {},
              "uuid": "73b5301e-9640-45a0-a124-0916e45d7bef",
              "parentUUID": "db0baa17-115a-4a27-a0c7-cf8fe0e27157",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4504bb94-b2da-40c7-85f2-2a0e59a80c9f",
            "bc5c01d9-95e1-4093-b77a-0721583a4abc",
            "342a89d0-71c9-4be8-b8f4-e8e54b744f0b",
            "73b5301e-9640-45a0-a124-0916e45d7bef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "531ccd8d-e2d5-4433-9e8c-d2245691b6fe",
          "title": "factorialShort",
          "fullFile": "D:\\automation-testing-mentoring\\mocha-unit-testing-hometask\\test\\specs\\factorialShort.spec.js",
          "file": "\\test\\specs\\factorialShort.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"factorialShort\"",
              "fullTitle": "factorialShort \"before each\" hook in \"factorialShort\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "factorial = new Factorial();\nspy = chai.spy.on(factorial, 'factorialShort');",
              "err": {},
              "uuid": "7378548f-fc6f-486c-ab54-4800b0ba8a99",
              "parentUUID": "531ccd8d-e2d5-4433-9e8c-d2245691b6fe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"factorialShort\"",
              "fullTitle": "factorialShort \"after each\" hook in \"factorialShort\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "factorial = null;",
              "err": {},
              "uuid": "eca17a43-fc93-47c7-890d-4deaac8e5d46",
              "parentUUID": "531ccd8d-e2d5-4433-9e8c-d2245691b6fe",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 6 when called with number 3",
              "fullTitle": "factorialShort should return 6 when called with number 3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(factorial.factorialShort(3)).to.be.equal(6);",
              "err": {},
              "uuid": "9221a10c-6181-4be6-80b2-b70596aaadef",
              "parentUUID": "531ccd8d-e2d5-4433-9e8c-d2245691b6fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 362880 when called with number 9",
              "fullTitle": "factorialShort should return 362880 when called with number 9",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(factorial.factorialShort(9)).to.be.equal(362880);",
              "err": {},
              "uuid": "7a30ed46-414c-4e60-bff3-87d395eb29e2",
              "parentUUID": "531ccd8d-e2d5-4433-9e8c-d2245691b6fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with a negative number",
              "fullTitle": "factorialShort should throw an error if provided with a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let callWithError = () => factorial.factorialShort(-1);\nexpect(spy).to.be.a.spy;\nexpect(callWithError).to.throw(`Negative number!`);",
              "err": {},
              "uuid": "dfa1ed78-2028-428d-a788-9c0c5c3f0327",
              "parentUUID": "531ccd8d-e2d5-4433-9e8c-d2245691b6fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be called twice when provided with 2",
              "fullTitle": "factorialShort should be called twice when provided with 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "factorial.factorialShort(2);\nexpect(spy).to.have.been.called(2);",
              "err": {},
              "uuid": "030fc037-3015-4af3-b24a-5d655636ba45",
              "parentUUID": "531ccd8d-e2d5-4433-9e8c-d2245691b6fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when provided 1",
              "fullTitle": "factorialShort should return 1 when provided 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(factorial.factorialShort(1)).to.be.equal(1);",
              "err": {},
              "uuid": "fdcaa368-796d-4204-8085-c765e7462e68",
              "parentUUID": "531ccd8d-e2d5-4433-9e8c-d2245691b6fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9221a10c-6181-4be6-80b2-b70596aaadef",
            "7a30ed46-414c-4e60-bff3-87d395eb29e2",
            "dfa1ed78-2028-428d-a788-9c0c5c3f0327",
            "030fc037-3015-4af3-b24a-5d655636ba45",
            "fdcaa368-796d-4204-8085-c765e7462e68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "451f1f6c-32d2-4654-ac84-2ca0a8d70491",
          "title": "factorialSimple",
          "fullFile": "D:\\automation-testing-mentoring\\mocha-unit-testing-hometask\\test\\specs\\factorialSimple.spec.js",
          "file": "\\test\\specs\\factorialSimple.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"factorialSimple\"",
              "fullTitle": "factorialSimple \"before each\" hook in \"factorialSimple\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "factorial = new Factorial();\nspy = chai.spy.on(factorial, 'factorialSimple');",
              "err": {},
              "uuid": "07951cdc-f62b-4cd4-bb48-6191c13a7869",
              "parentUUID": "451f1f6c-32d2-4654-ac84-2ca0a8d70491",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"factorialSimple\"",
              "fullTitle": "factorialSimple \"after each\" hook in \"factorialSimple\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "factorial = null;",
              "err": {},
              "uuid": "47d57d44-e12c-4958-8026-52dde2711087",
              "parentUUID": "451f1f6c-32d2-4654-ac84-2ca0a8d70491",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 6 when called with number 3",
              "fullTitle": "factorialSimple should return 6 when called with number 3",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(factorial.factorialSimple(3)).to.be.equal(6);",
              "err": {},
              "uuid": "3873b054-7f8f-402e-b5c4-7ddd4bd1645f",
              "parentUUID": "451f1f6c-32d2-4654-ac84-2ca0a8d70491",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 362880 when called with number 9",
              "fullTitle": "factorialSimple should return 362880 when called with number 9",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(factorial.factorialSimple(9)).to.be.equal(362880);",
              "err": {},
              "uuid": "ba6be9d1-57d5-445d-9bcb-15e6c11af68f",
              "parentUUID": "451f1f6c-32d2-4654-ac84-2ca0a8d70491",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with a negative number",
              "fullTitle": "factorialSimple should throw an error if provided with a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let callWithError = () => factorial.factorialSimple(-1);\nexpect(spy).to.be.a.spy;\nexpect(callWithError).to.throw(`Negative number!`);",
              "err": {},
              "uuid": "4159fa83-6d36-42c0-a747-4be37593bddc",
              "parentUUID": "451f1f6c-32d2-4654-ac84-2ca0a8d70491",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be called twice when provided with 2",
              "fullTitle": "factorialSimple should be called twice when provided with 2",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "factorial.factorialSimple(2);\nexpect(spy).to.have.been.called(1);",
              "err": {},
              "uuid": "44b64a7b-0b1b-4454-a109-7a903fcb2986",
              "parentUUID": "451f1f6c-32d2-4654-ac84-2ca0a8d70491",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when provided 1",
              "fullTitle": "factorialSimple should return 1 when provided 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(factorial.factorialSimple(1)).to.be.equal(1);",
              "err": {},
              "uuid": "818e36cc-164e-4a3e-84be-7d40d63c2224",
              "parentUUID": "451f1f6c-32d2-4654-ac84-2ca0a8d70491",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3873b054-7f8f-402e-b5c4-7ddd4bd1645f",
            "ba6be9d1-57d5-445d-9bcb-15e6c11af68f",
            "4159fa83-6d36-42c0-a747-4be37593bddc",
            "44b64a7b-0b1b-4454-a109-7a903fcb2986",
            "818e36cc-164e-4a3e-84be-7d40d63c2224"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ef9f47dc-75e9-48af-aa40-72801062ec09",
          "title": "calculator tests for multiply function",
          "fullFile": "D:\\automation-testing-mentoring\\mocha-unit-testing-hometask\\test\\specs\\multiply.spec.js",
          "file": "\\test\\specs\\multiply.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"calculator tests for multiply function\"",
              "fullTitle": "calculator tests for multiply function \"before each\" hook in \"calculator tests for multiply function\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calculator = new Calculator();",
              "err": {},
              "uuid": "ecde9ea3-ed2c-463d-bfde-9a85261c88e5",
              "parentUUID": "ef9f47dc-75e9-48af-aa40-72801062ec09",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should correctly multiply some parameters",
              "fullTitle": "calculator tests for multiply function should correctly multiply some parameters",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(1, 4, 5)).to.be.equal(20);",
              "err": {},
              "uuid": "75622b3c-f8b5-45e3-87d7-4b0be55c0d8b",
              "parentUUID": "ef9f47dc-75e9-48af-aa40-72801062ec09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return parameter value if multiply method has 1 parameter",
              "fullTitle": "calculator tests for multiply function should return parameter value if multiply method has 1 parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(5)).to.be.equal(5);",
              "err": {},
              "uuid": "c6d20814-5c46-4f48-a1b5-fbf7df44df94",
              "parentUUID": "ef9f47dc-75e9-48af-aa40-72801062ec09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 if one of the parameters is 0",
              "fullTitle": "calculator tests for multiply function should return 0 if one of the parameters is 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(5, 7, 9, 10, 11, 0)).to.be.equal(0);",
              "err": {},
              "uuid": "b305fbe1-dd6e-45b4-9f6a-8ef11598d61b",
              "parentUUID": "ef9f47dc-75e9-48af-aa40-72801062ec09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return negative value if one of the parameters is negative",
              "fullTitle": "calculator tests for multiply function should return negative value if one of the parameters is negative",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(1, 5, -1)).to.be.equal(-5);",
              "err": {},
              "uuid": "c201d704-1552-4501-a9e9-e9a135fa8002",
              "parentUUID": "ef9f47dc-75e9-48af-aa40-72801062ec09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return positive value if two parameters are negative",
              "fullTitle": "calculator tests for multiply function should return positive value if two parameters are negative",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(calculator.multiply(-7, -1)).to.be.equal(7);",
              "err": {},
              "uuid": "5efa291b-a6a8-4663-a564-3380650eabd3",
              "parentUUID": "ef9f47dc-75e9-48af-aa40-72801062ec09",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error if some of parameters are not a number in multiply method",
              "fullTitle": "calculator tests for multiply function should return error if some of parameters are not a number in multiply method",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function() {\n  calculator.multiply(1, 2, '@');\n} ).throw('Some of arguments are not a number!');",
              "err": {},
              "uuid": "7f74fc28-211b-4f5f-a440-ca3561c5bd61",
              "parentUUID": "ef9f47dc-75e9-48af-aa40-72801062ec09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75622b3c-f8b5-45e3-87d7-4b0be55c0d8b",
            "c6d20814-5c46-4f48-a1b5-fbf7df44df94",
            "b305fbe1-dd6e-45b4-9f6a-8ef11598d61b",
            "c201d704-1552-4501-a9e9-e9a135fa8002",
            "5efa291b-a6a8-4663-a564-3380650eabd3",
            "7f74fc28-211b-4f5f-a440-ca3561c5bd61"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}